import java.io.*;
import java.util.StringTokenizer;

import static java.lang.Integer.max;


public class Main {
    public static int Polinom(int[][] arr, char[] ch) {
        int i = 0;
        char[] endArr = new char[arr[0][arr.length - 1]];
        int endArrI = 0;
        String string = "";
        for (int j = ch.length - 1; j >= 0;) {
            if (i >= j) {
                if (arr[0][arr.length - 1] % 2 == 1) {
                    endArr[arr[0][arr.length - 1] / 2] = ch[i];
                    //System.out.println("i = " + i);
                }
                for (int y = 0; y < endArr.length; y++) {
                    //System.out.println(y);
                    //System.out.print(endArr[y]);
                    string += endArr[y];
                }
                try (PrintWriter pw = new PrintWriter("output.txt")) {
                    pw.write(String.valueOf(arr[0][arr.length - 1]));
                    pw.write("\n" + string);
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                }
                return 0;
            }
            if (ch[j] == ch[i]) {
                endArr[endArrI] = ch[j];
                endArr[endArr.length - 1 - endArrI++] = ch[j];
                i++;
                j--;
            } else {
                if (arr[i][j - 1] > arr[i + 1][j]) {
                    j--;
                } else {
                    i++;
                }
            }
        }
        if (arr[0][arr.length - 1] % 2 == 1) {
            endArr[arr[0][arr.length - 1] / 2] = ch[i];
            //System.out.println("i = " + i);
        }
        for (int y = 0; y < endArr.length; y++) {
            //System.out.println(y);
            //System.out.print(endArr[y]);
            string += endArr[y];
        }
        try (PrintWriter pw = new PrintWriter("output.txt")) {
            pw.write(String.valueOf(arr[0][arr.length - 1]));
            pw.write("\n" + string);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return 0;
    }

    public static void Schet(int[][] arr, char[] ch) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr.length; j++) {
                arr[i][j] = 0;
            }
        }
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j + i < arr.length; j++) {
                if (i == 0) {
                    arr[j][j] = 1;
                } else if (i == 1) {
                    arr[j][j + i] = ch[j + i] == ch[j] ? 2 : 1;
                } else {
                    arr[j][j + i] = ch[j + i] == ch[j] ? arr[j + 1][j + i - 1] + 2 : max(arr[j + 1][j + i], arr[j][j + i - 1]);
                }
            }
        }
        Polinom(arr, ch);
    }
    
    public static void main(String[] args) throws IOException {
        FastScanner fs = new FastScanner("input.txt");

        char[] arrChar = (fs.next()).toCharArray();
        int[][] arrI = new int[arrChar.length][arrChar.length];

        Schet(arrI, arrChar);
    }

    static class FastScanner {
        BufferedReader reader;
        StringTokenizer tokenizer;

        public FastScanner(String fileName) throws IOException {
            reader = new BufferedReader(new FileReader(fileName));
        }

        public String next() throws IOException {
            while (tokenizer == null || !tokenizer.hasMoreTokens()) {
                String line = reader.readLine();
                if (line == null) {
                    throw new EOFException();
                }
                tokenizer = new StringTokenizer(line);
            }
            return tokenizer.nextToken();
        }

        public int nextInt() throws IOException {
            return Integer.parseInt(next());
        }

        public long nextLong() throws IOException {
            return Long.parseLong(next());
        }

        public char nextChar() throws IOException {
            return next().charAt(0);
        }
    }
}